openapi: 3.0.3
info:
  title: Tally-like API
  version: 1.0.0
servers:
  - url: https://yourapp.example.com
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
paths:
  /api/auth/register:
    post:
      summary: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
                name: { type: string }
      responses:
        "201": { description: Created }
        "409": { description: Email in use }
  /api/auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
      responses:
        "200": { description: OK }
        "401": { description: Invalid credentials }
  /api/auth/logout:
    post:
      summary: Logout
      responses:
        "200": { description: OK }
  /api/auth/me:
    get:
      summary: Current user
      security:
        - cookieAuth: []
      responses:
        "200": { description: OK }
        "401": { description: Unauthorized }
  /api/forms:
    get:
      summary: List forms
      security:
        - cookieAuth: []
      responses:
        "200": { description: OK }
        "401": { description: Unauthorized }
    post:
      summary: Create form
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title]
              properties:
                title: { type: string }
                description: { type: string }
      responses:
        "201": { description: Created }
        "401": { description: Unauthorized }
  /api/forms/{id}:
    get:
      summary: Get form
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { description: OK }
        "401": { description: Unauthorized }
        "403": { description: Forbidden }
        "404": { description: Not found }
    patch:
      summary: Update form
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                isPublished: { type: boolean }
                notifyOnSubmit: { type: boolean }
      responses:
        "200": { description: OK }
    delete:
      summary: Delete form
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { description: OK }
  /api/forms/{id}/fields:
    put:
      summary: Replace fields
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [fields]
              properties:
                fields:
                  type: array
                  items:
                    type: object
                    required: [label, type, order]
                    properties:
                      label: { type: string }
                      type: { type: string, enum: [TEXT, TEXTAREA, EMAIL, NUMBER, SELECT, CHECKBOX, RADIO, DATE, FILE] }
                      required: { type: boolean }
                      order: { type: integer }
                      options: { type: array, items: { type: string } }
      responses:
        "200": { description: OK }
  /api/forms/{id}/submissions:
    get:
      summary: List submissions
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { description: OK }
    post:
      summary: Submit a response
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "201": { description: Created }
        "402": { description: Quota exceeded }
  /api/forms/{id}/export.csv:
    get:
      summary: Export CSV
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { description: OK }
  /api/billing/create-checkout-session:
    post:
      summary: Create Stripe Checkout Session
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [plan]
              properties:
                plan: { type: string, enum: [PRO, TEAM] }
      responses:
        "201": { description: Created }
  /api/billing/create-portal-session:
    post:
      summary: Create Stripe Billing Portal Session
      security:
        - cookieAuth: []
      responses:
        "201": { description: Created }
  /api/billing/webhook:
    post:
      summary: Stripe webhook
      responses:
        "200": { description: OK }


