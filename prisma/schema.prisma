generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TeamRole {
  OWNER
  EDITOR
  VIEWER
}

enum Plan {
  FREE
  PRO
  TEAM
}

enum FieldType {
  TEXT
  EMAIL
  NUMBER
  TEXTAREA
  SELECT
  CHECKBOX
  RADIO
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIAL
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  password         String
  name             String?
  role             Role           @default(USER)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  forms            Form[]
  subscription     Subscription?
  teamsOwned       Team[]         @relation("TeamOwner")
  teamMemberships  TeamMember[]
  notifyOnSubmit   Boolean        @default(true)
  stripeCustomerId String?
  lastLoginAt      DateTime?
}

model Team {
  id               String         @id @default(cuid())
  name             String
  description      String?
  ownerId          String
  owner            User           @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members          TeamMember[]
  forms            Form[]
  subscription     Subscription?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model TeamMember {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  role      TeamRole @default(VIEWER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model Subscription {
  id                 String   @id @default(cuid())
  plan               Plan     @default(FREE)
  status             SubscriptionStatus @default(ACTIVE)
  userId             String?
  teamId             String?
  stripeCustomerId   String?
  stripeSubscriptionId String?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team? @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId], map: "unique_user_subscription")
  @@unique([teamId], map: "unique_team_subscription")
}

model Form {
  id           String      @id @default(cuid())
  title        String
  description  String?
  userId       String?
  teamId       String?
  isPublished  Boolean     @default(false)
  notifyOnSubmit Boolean   @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team? @relation(fields: [teamId], references: [id], onDelete: Cascade)
  fields Field[]
  submissions Submission[]
}

model Field {
  id          String    @id @default(cuid())
  formId      String
  type        FieldType
  label       String
  required    Boolean   @default(false)
  order       Int
  optionsJson String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers SubmissionAnswer[]

  @@index([formId])
}

model Submission {
  id        String   @id @default(cuid())
  formId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers SubmissionAnswer[]
}

model SubmissionAnswer {
  id           String   @id @default(cuid())
  submissionId String
  fieldId      String
  value        String
  createdAt    DateTime @default(now())

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  field      Field      @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([submissionId, fieldId])
  @@index([submissionId])
  @@index([fieldId])
}
